from django.db import models
from datetime import date

class Director(models.Model):
    name = models.CharField(max_length = 200,primary_key=True)

class Actor(models.Model):
    actor_id = models.CharField(max_length=100,primary_key=True)
    name = models.CharField(max_length = 100)

class Movie(models.Model):
    name = models.CharField(max_length=100)
    movie_id = models.CharField(max_length=100,primary_key=True)
    release_date = models.DateField()
    box_office_collection_in_crores = models.FloatField()
    director = models.ForeignKey(Director,on_delete = models.CASCADE,)
    actors = models.ManyToManyField(Actor,through='Cast')    

class Cast(models.Model):
    actor = models.ForeignKey(Actor,on_delete = models.CASCADE,)
    movie = models.ForeignKey(Movie,on_delete = models.CASCADE,)
    role = models.CharField(max_length = 50)
    is_debut_movie = models.BooleanField(default = False)
    
class Rating(models.Model):
    movie = models.OneToOneField(Movie,on_delete=models.CASCADE,)
    rating_one_count = models.IntegerField(default = 0)
    rating_two_count = models.IntegerField(default = 0)
    rating_three_count = models.IntegerField(default = 0)
    rating_four_count = models.IntegerField(default = 0)
    rating_five_count = models.IntegerField(default = 0)
    
    
    
def populate_database(actors_list, movies_list, directors_list, movie_rating_list):
    
    for actor in actors_list:
        Actor.objects.create(actor_id = actor['actor_id'],name=actor['name'])
        
    for director in directors_list:        
        Director.objects.create(name=director)
        
    for movie in movies_list:
        Movie.objects.create(movie_id = movie['movie_id'],
            name = movie['name'],
            box_office_collection_in_crores = movie['box_office_collection_in_crores'],
            release_date = movie['release_date'],
            director = Director.objects.get(name = movie['director_name'])
        )
        for actor in movie['actors']:
            Cast.objects.create(
                    actor = Actor.objects.get(actor_id = actor['actor_id']),
                    movie = Movie.objects.get(movie_id = movie['movie_id']),
                    role = actor['role'],
                    is_debut_movie = actor['is_debut_movie']
            )
    
    for movie_rate in movie_rating_list:
        Rating.objects.create(
            movie = Movie.objects.get(movie_id = movie_rate['movie_id']),
            rating_one_count = movie_rate['rating_one_count'],
            rating_two_count = movie_rate['rating_two_count'],
            rating_three_count = movie_rate['rating_three_count'],
            rating_four_count = movie_rate['rating_four_count'],
            rating_five_count = movie_rate['rating_five_count']
        )


def get_no_of_distinct_movies_actor_acted(actor_id):
    
    #return Actor.objects.get(actor_id = actor_id).movie_set.distinct().count()
    return Movie.objects.filter(actors__actor_id = actor_id).distinct().count()
    
def get_movies_directed_by_director(director_obj):
    
    return director_obj.movie_set.all()
    #return Movie.objects.filter(director = director_obj)
    
def get_average_rating_of_movie(movie_obj):
    
    try:
        rate_obj = Rating.objects.get(movie = movie_obj)
        one = rate_obj.rating_one_count 
        two = rate_obj.rating_two_count 
        three = rate_obj.rating_three_count 
        four = rate_obj.rating_four_count  
        five = rate_obj.rating_five_count 
        sum_of_ratings = one + two * 2 + three * 3 + four * 4 + five * 5
        no_of_ratings = one + two + three + four + five
        return sum_of_ratings/no_of_ratings
    except ZeroDivisionError:
        return 0
    except Rating.DoesNotExist:
        return 0

def delete_movie_rating(movie_obj):
    
    try:
        rating_obj = Rating.objects.get(movie = movie_obj)
    except Rating.DoesNotExist:
        return 0
    rating_obj.delete()

def get_all_actor_objects_acted_in_given_movies(movie_objs):
    
    return Actor.objects.filter(movie__in=movie_objs).distinct()
    
def update_director_for_given_movie(movie_obj, director_obj):
    
    movie_obj.director = director_obj
    movie_obj.save()

def get_distinct_movies_acted_by_actor_whose_name_contains_john():
    
    return Movie.objects.filter(actors__name__contains='john').distinct()
    
def remove_all_actors_from_given_movie(movie_obj):
    
    movie_obj.actors.clear()

def get_all_rating_objects_for_given_movies(movie_objs):
    
    return Rating.objects.filter(movie__in=movie_objs)

def get_all_distinct_actors_for_given_movie(movie_obj):
    
    return Actor.objects.filter(movie = movie_obj).distinct()
    
    
    
views ::--

def get_list_of_questions=(request):
    string = request.GET.get('sort_by')
    list_of_questions=Question.objects.all()
    if string == 'asc':
        list_of_questions=Question.objects.order_by('text')
    elif string == 'desc':
        list_of_questions=Question.objects.order_by('-text')
    context={'list_of_questions':list_of_questions}
    return render(request,'get_list_of_questions.html',context)

def create_question(request):
    if request.method == 'GET':
        return render(request,'create_question_form.html')
    elif request.method == 'POST':
        question_text=request.POST.get('question')
        question_answer=request.POST.get('answer')
        if  len(question_text.strip())and len(question_answer.strip()):
            question_obj=Question(text=question_text,answer=question_answer)
            question_obj.save()
            return render(request,'create_question_success.html')
        else:
            return render(request,'create_question_failure.html')

def get_question(request,question_id):
    question=Question.objects.get(id=question_id)
    return render(request,'each_question_form.html',{'question':question})
    
def update_question(request,question_id):
    if request.method == 'POST':
        question_text=request.POST.get('question')
        question_answer=request.POST.get('answer')
        if  len(question_text.strip())and len(question_answer.strip()):
            question_obj = Question.objects.get(id = question_id)
            question_obj.text=question_text
            question_obj.answer=question_answer
            question_obj.save()
            return render(request,'update_question_success.html')
        else:
            return render(request,'update_question_failure.html')
    
def delete_question(request,question_id):
        try:
            question=Question.objects.get(id=question_id)
        except Question.DoesNotExist:
            return render(request,'delete_question_failure.html')    
        question.delete()
        return render(request,'delete_question_success.html')
        


    
    
